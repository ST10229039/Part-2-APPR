@model IEnumerable<GiftOfTheGivers.Models.Volunteer>
@{
    ViewData["Title"] = "Manage Volunteers";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="fas fa-users-cog me-2 text-info"></i>Volunteer Management</h2>
    <div class="btn-group">
        <button type="button" class="btn btn-outline-info dropdown-toggle" data-bs-toggle="dropdown">
            <i class="fas fa-download me-1"></i>Export
        </button>
        <ul class="dropdown-menu">
            <li><a class="dropdown-item" href="#"><i class="fas fa-file-excel me-1"></i>Excel</a></li>
            <li><a class="dropdown-item" href="#"><i class="fas fa-file-pdf me-1"></i>PDF</a></li>
        </ul>
    </div>
</div>

<!-- Statistics Cards -->
<div class="row mb-4">
    <div class="col-md-3 mb-3">
        <div class="card text-white bg-primary stat-card">
            <div class="card-body text-center">
                <i class="fas fa-users fa-2x mb-2"></i>
                <h3>@Model.Count()</h3>
                <p class="mb-0">Total Volunteers</p>
            </div>
        </div>
    </div>
    <div class="col-md-3 mb-3">
        <div class="card text-white bg-success stat-card">
            <div class="card-body text-center">
                <i class="fas fa-user-check fa-2x mb-2"></i>
                <h3>@Model.Count(v => v.Status == "Active")</h3>
                <p class="mb-0">Active</p>
            </div>
        </div>
    </div>
    <div class="col-md-3 mb-3">
        <div class="card text-white bg-warning stat-card">
            <div class="card-body text-center">
                <i class="fas fa-user-clock fa-2x mb-2"></i>
                <h3>@Model.Count(v => v.Status == "Inactive")</h3>
                <p class="mb-0">Inactive</p>
            </div>
        </div>
    </div>
    <div class="col-md-3 mb-3">
        <div class="card text-white bg-info stat-card">
            <div class="card-body text-center">
                <i class="fas fa-tasks fa-2x mb-2"></i>
                <h3>@Model.Count(v => v.AssignedIncidentID != null)</h3>
                <p class="mb-0">Assigned</p>
            </div>
        </div>
    </div>
</div>

<!-- Volunteers Table -->
<div class="card feature-card">
    <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
        <h5 class="mb-0"><i class="fas fa-list me-2"></i>All Volunteers</h5>
        <div class="input-group" style="width: 300px;">
            <input type="text" class="form-control" placeholder="Search volunteers..." id="searchVolunteers">
            <button class="btn btn-light" type="button">
                <i class="fas fa-search"></i>
            </button>
        </div>
    </div>
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-hover mb-0">
                <thead class="table-light">
                    <tr>
                        <th>Volunteer</th>
                        <th>Contact</th>
                        <th>Skills</th>
                        <th>Availability</th>
                        <th>Status</th>
                        <th>Assignment</th>
                        <th>Registered</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var volunteer in Model)
                    {
                        <tr>
                            <td>
                                <div>
                                    <strong>@volunteer.User.Name</strong>
                                    <br>
                                    <small class="text-muted">ID: @volunteer.VolunteerID</small>
                                </div>
                            </td>
                            <td>
                                <div>
                                    <small>@volunteer.User.Email</small>
                                    <br>
                                    <small class="text-muted">@volunteer.User.Phone</small>
                                </div>
                            </td>
                            <td>
                                <div class="skills-truncate" style="max-width: 200px;">
                                    <small>@volunteer.Skills</small>
                                </div>
                            </td>
                            <td>
                                <small>@volunteer.Availability</small>
                            </td>
                            <td>
                                <span class="badge @GetVolunteerStatusBadge(volunteer.Status)">@volunteer.Status</span>
                            </td>
                            <td>
                                @if (volunteer.AssignedIncident != null)
                                {
                                    <div>
                                        <small class="fw-bold">@volunteer.AssignedIncident.Title</small>
                                        <br>
                                        <small class="text-muted">@volunteer.AssignedIncident.Location</small>
                                    </div>
                                }
                                else
                                {
                                    <span class="text-muted">Not assigned</span>
                                }
                            </td>
                            <td>
                                <small>@volunteer.RegistrationDate.ToString("MMM dd, yyyy")</small>
                            </td>
                            <td>
                                <div class="btn-group btn-group-sm">
                                    <button type="button" class="btn btn-outline-primary" 
                                            data-bs-toggle="modal" data-bs-target="#volunteerModal"
                                            onclick="viewVolunteerDetails(@volunteer.VolunteerID)">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-success"
                                            onclick="updateVolunteerStatus(@volunteer.VolunteerID, 'Active')"
                                            @(volunteer.Status == "Active" ? "disabled" : "")>
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-warning"
                                            onclick="updateVolunteerStatus(@volunteer.VolunteerID, 'Inactive')"
                                            @(volunteer.Status == "Inactive" ? "disabled" : "")>
                                        <i class="fas fa-pause"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-info"
                                            data-bs-toggle="modal" data-bs-target="#assignmentModal"
                                            onclick="prepareAssignment(@volunteer.VolunteerID)">
                                        <i class="fas fa-tasks"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@if (!Model.Any())
{
    <div class="text-center py-5">
        <i class="fas fa-users fa-4x text-muted mb-3"></i>
        <h3>No Volunteers Registered</h3>
        <p class="text-muted">There are no volunteers in the system.</p>
    </div>
}

<!-- Volunteer Details Modal -->
<div class="modal fade" id="volunteerModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title">Volunteer Details</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="volunteerDetails">
                <!-- Details will be loaded here -->
            </div>
        </div>
    </div>
</div>

<!-- Assignment Modal -->
<div class="modal fade" id="assignmentModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning text-white">
                <h5 class="modal-title">Assign Volunteer</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="assignmentForm">
                    <input type="hidden" id="volunteerId">
                    <div class="mb-3">
                        <label for="incidentSelect" class="form-label">Select Incident</label>
                        <select class="form-select" id="incidentSelect">
                            <option value="">-- Select Incident --</option>
                            <!-- Incidents would be loaded from server -->
                            <option value="1">KZN Floods - Emergency Response</option>
                            <option value="2">Western Cape Fire Relief</option>
                            <option value="3">Gauteng Storm Damage</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="assignmentNotes" class="form-label">Assignment Notes</label>
                        <textarea class="form-control" id="assignmentNotes" rows="3" 
                                  placeholder="Enter specific instructions or notes for this assignment..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-warning" onclick="assignVolunteer()">Assign</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Search functionality
        document.getElementById('searchVolunteers').addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            const rows = document.querySelectorAll('tbody tr');
            
            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        });

        // View volunteer details
        async function viewVolunteerDetails(volunteerId) {
            // In a real application, you would fetch details from the server
            const details = `
                <div class="row">
                    <div class="col-md-6">
                        <h6>Personal Information</h6>
                        <p><strong>Name:</strong> Volunteer Name</p>
                        <p><strong>Email:</strong> volunteer@example.com</p>
                        <p><strong>Phone:</strong> +27 123 456 789</p>
                        <p><strong>Emergency Contact:</strong> +27 987 654 321</p>
                    </div>
                    <div class="col-md-6">
                        <h6>Volunteer Details</h6>
                        <p><strong>Skills:</strong> First Aid, Logistics, Counseling</p>
                        <p><strong>Availability:</strong> Weekends and Evenings</p>
                        <p><strong>Preferred Location:</strong> KwaZulu-Natal</p>
                        <p><strong>Transport:</strong> Available</p>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <h6>Assignment History</h6>
                        <p class="text-muted">No previous assignments.</p>
                    </div>
                </div>
            `;
            document.getElementById('volunteerDetails').innerHTML = details;
        }

        // Update volunteer status
        async function updateVolunteerStatus(volunteerId, status) {
            if (!confirm('Are you sure you want to update the volunteer status?')) {
                return;
            }

            try {
                // Simulate API call
                await new Promise(resolve => setTimeout(resolve, 1000));
                showNotification('Volunteer status updated successfully!', 'success');
                setTimeout(() => location.reload(), 1500);
            } catch (error) {
                showNotification('Error updating volunteer status: ' + error.message, 'error');
            }
        }

        // Prepare assignment
        function prepareAssignment(volunteerId) {
            document.getElementById('volunteerId').value = volunteerId;
        }

        // Assign volunteer
        async function assignVolunteer() {
            const volunteerId = document.getElementById('volunteerId').value;
            const incidentId = document.getElementById('incidentSelect').value;
            const notes = document.getElementById('assignmentNotes').value;

            if (!incidentId) {
                alert('Please select an incident.');
                return;
            }

            try {
                // Simulate API call
                await new Promise(resolve => setTimeout(resolve, 1000));
                showNotification('Volunteer assigned successfully!', 'success');
                $('#assignmentModal').modal('hide');
                setTimeout(() => location.reload(), 1500);
            } catch (error) {
                showNotification('Error assigning volunteer: ' + error.message, 'error');
            }
        }

        function showNotification(message, type = 'info') {
            // Create and show notification
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const notification = document.createElement('div');
            notification.className = `alert ${alertClass} alert-dismissible fade show position-fixed`;
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notification.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 5000);
        }
    </script>

    <style>
        .skills-truncate {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
    </style>
}

@functions {
    public string GetVolunteerStatusBadge(string status)
    {
        return status?.ToLower() switch
        {
            "active" => "bg-success",
            "inactive" => "bg-warning",
            "pending" => "bg-secondary",
            _ => "bg-secondary"
        };
    }
}